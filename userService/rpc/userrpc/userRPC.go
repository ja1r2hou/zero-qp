// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: userService.proto

package userrpc

import (
	"context"

	"zero-qp/userService/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CidBindUidReq    = user.CidBindUidReq
	CidBindUidResp   = user.CidBindUidResp
	RegisterParams   = user.RegisterParams
	RegisterResponse = user.RegisterResponse
	Request          = user.Request
	Response         = user.Response

	UserRPC interface {
		Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
		Register(ctx context.Context, in *RegisterParams, opts ...grpc.CallOption) (*RegisterResponse, error)
		// CidBindUid websocket cid绑定uid
		CidBindUid(ctx context.Context, in *CidBindUidReq, opts ...grpc.CallOption) (*CidBindUidResp, error)
	}

	defaultUserRPC struct {
		cli zrpc.Client
	}
)

func NewUserRPC(cli zrpc.Client) UserRPC {
	return &defaultUserRPC{
		cli: cli,
	}
}

func (m *defaultUserRPC) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	client := user.NewUserRPCClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}

func (m *defaultUserRPC) Register(ctx context.Context, in *RegisterParams, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := user.NewUserRPCClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

// CidBindUid websocket cid绑定uid
func (m *defaultUserRPC) CidBindUid(ctx context.Context, in *CidBindUidReq, opts ...grpc.CallOption) (*CidBindUidResp, error) {
	client := user.NewUserRPCClient(m.cli.Conn())
	return client.CidBindUid(ctx, in, opts...)
}
