// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: userService.proto

package server

import (
	"context"

	"zero-qp/userService/rpc/internal/logic"
	"zero-qp/userService/rpc/internal/svc"
	"zero-qp/userService/rpc/user"
)

type UserRPCServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserRPCServer
}

func NewUserRPCServer(svcCtx *svc.ServiceContext) *UserRPCServer {
	return &UserRPCServer{
		svcCtx: svcCtx,
	}
}

func (s *UserRPCServer) Ping(ctx context.Context, in *user.Request) (*user.Response, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

func (s *UserRPCServer) Register(ctx context.Context, in *user.RegisterParams) (*user.RegisterResponse, error) {
	l := logic.NewRegisterLogic(ctx, s.svcCtx)
	return l.Register(in)
}

// CidBindUid websocket cid绑定uid
func (s *UserRPCServer) CidBindUid(ctx context.Context, in *user.CidBindUidReq) (*user.CidBindUidResp, error) {
	l := logic.NewCidBindUidLogic(ctx, s.svcCtx)
	return l.CidBindUid(in)
}
